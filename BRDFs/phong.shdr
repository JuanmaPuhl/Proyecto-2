{
  "vertexSource": "#version 300 es \n\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\n\n\nin vec3 vertexPosition;\nin vec3 vertexNormal;\n\nout vec3 vNE; //Vector normal en espacio ojo\nout vec3 vLE; //Vector de direccion de luz\nout vec3 vVE; //Vector de vista (al ojo)\n\nuniform vec4 posL; //Posicion luz\nvoid main(void){\n    mat4 MV =  viewMatrix * modelMatrix;\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1.0);\n    vec3 lightPosition_Eyespace = vec3(viewMatrix*posL);\n    vec3 posVE = vec3(MV*vec4(vertexPosition,1.0));\n    vLE = normalize(vec3(lightPosition_Eyespace-posVE));\n    \n    mat3 MN = normalMatrix;\n    //Transformar normal del espacio objeto al ojo\n    vNE = normalize(MN * vertexNormal);\n    \n    //Calcular el vector del ojo en espacio del ojo; el ojo, por def esta en el origen.\n    vVE= normalize(-posVE);\n    \n}",
  "fragmentSource": "#version 300 es\nprecision highp float;\nuniform mat4 viewMatrix;\nin vec3 vNE; \nin vec3 vLE;\nin vec3 vVE;\nout vec4 colorFrag;\nuniform vec3 ka;\nuniform float coefEspec;\nuniform vec3 kd;\nuniform vec3 ks;\nuniform vec3 ldir;\nuniform float angulo;\nvoid main(){\n    vec3 N = normalize(vNE);\n    vec3 L = normalize(vLE);\n    vec3 V = normalize(vVE);\n    vec3 H = normalize(L+V);\n    \n    vec3 lightDirection_EyeSpace = vec3(viewMatrix* vec4(ldir,0.0));\n    vec3 D = normalize(lightDirection_EyeSpace);\n    \n    \n    \n    float LdotN = max(dot(L,N),0.0);\n    float HdotV = max(dot(H,N),0.0);\n    float LdotD = max(dot(-L,D),0.0);\n    float angle = acos(LdotD);\n    bool insideSpot = angle<angulo;\n    \n    vec3 ambient = ka;\n    vec3 diffuse = vec3(0.0,0.0,0.0);\n    vec3 specular = vec3(0.0,0.0,0.0);\n    if(insideSpot){\n        diffuse = kd * LdotN;\n        specular = ks * pow(HdotV,coefEspec);\n    }\n    colorFrag =vec4( ambient + diffuse + specular,1.0);\n    //Calculo termino difuso + espec de Blinn-Phong\n    //float difuso = max(dot(L,N),0.0) ;\n    //float specBlinnPhong = pow(max(dot(N,H),0.0),coefEspec);\n    //if(dot(L,N)< 0.0){\n    //    specBlinnPhong = 0.0;\n    //}\n  \t//colorFrag = ka + kd*difuso + ks*specBlinnPhong;\n   \n}",
  "model": "sphere",
  "uniforms": [
    {
      "name": "posL",
      "type": "vec4",
      "value": [
        0,
        5,
        0,
        1
      ]
    },
    {
      "name": "ka",
      "type": "vec3",
      "value": [
        0.10000000149011612,
        0,
        0
      ]
    },
    {
      "name": "coefEspec",
      "type": "float",
      "value": 89.6
    },
    {
      "name": "kd",
      "type": "vec3",
      "value": [
        0.6000000238418579,
        0.6000000238418579,
        0.6100000143051147
      ]
    },
    {
      "name": "ks",
      "type": "vec3",
      "value": [
        1,
        1,
        1
      ]
    },
    {
      "name": "ldir",
      "type": "vec3",
      "value": [
        1,
        -1,
        1
      ]
    },
    {
      "name": "angulo",
      "type": "float",
      "value": 1.4
    }
  ]
}